#!/bin/bash

# Script para iniciar a pipeline de desenvolvimento com Docker
# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Iniciando Pipeline de Desenvolvimento${NC}"
echo "=================================================="

# Fun√ß√£o para criar diret√≥rios necess√°rios
create_directories() {
    echo -e "${BLUE}üìÅ Criando diret√≥rios necess√°rios...${NC}"
    mkdir -p logs/dev logs/test logs/prod
    mkdir -p database
    echo -e "${GREEN}‚úÖ Diret√≥rios criados${NC}"
}

# Fun√ß√£o para parar containers existentes
stop_existing() {
    echo -e "${BLUE}üõë Parando containers existentes...${NC}"
    sudo docker-compose down --remove-orphans
}

# Fun√ß√£o para construir e iniciar ambiente espec√≠fico
start_environment() {
    local env=$1
    echo -e "${BLUE}üèóÔ∏è  Construindo ambiente: $env${NC}"
    
    case $env in
        "dev")
            sudo docker-compose up --build app-dev postgres-dev -d
            PORT="8085"
            ;;
        "test")
            sudo docker-compose up --build app-test postgres-test -d
            PORT="8086"
            ;;
        "prod")
            sudo docker-compose up --build app-prod postgres-prod -d
            PORT="8087"
            ;;
        "all")
            sudo docker-compose up --build -d
            echo -e "${GREEN}üåê Todos os ambientes iniciados:${NC}"
            echo -e "  üîß Desenvolvimento: http://localhost:8085"
            echo -e "  üß™ Teste: http://localhost:8086" 
            echo -e "  üöÄ Produ√ß√£o: http://localhost:8087"
            return
            ;;
        *)
            echo -e "${RED}‚ùå Ambiente inv√°lido: $env${NC}"
            echo -e "${YELLOW}üí° Use: dev, test, prod ou all${NC}"
            exit 1
            ;;
    esac
    
    echo -e "${GREEN}‚úÖ Ambiente $env iniciado em: http://localhost:$PORT${NC}"
}

# Fun√ß√£o para mostrar status dos containers
show_status() {
    echo -e "${BLUE}üìä Status dos containers:${NC}"
    sudo docker-compose ps
}

# Fun√ß√£o para mostrar logs
show_logs() {
    local env=${1:-"dev"}
    echo -e "${BLUE}üìù Logs do ambiente $env:${NC}"
    case $env in
        "dev") sudo docker-compose logs -f app-dev ;;
        "test") sudo docker-compose logs -f app-test ;;
        "prod") sudo docker-compose logs -f app-prod ;;
        *) sudo docker-compose logs -f ;;
    esac
}

# Menu principal
show_menu() {
    echo ""
    echo -e "${YELLOW}Escolha uma op√ß√£o:${NC}"
    echo "1. Iniciar ambiente de Desenvolvimento"
    echo "2. Iniciar ambiente de Teste" 
    echo "3. Iniciar ambiente de Produ√ß√£o"
    echo "4. Iniciar TODOS os ambientes"
    echo "5. Ver status dos containers"
    echo "6. Ver logs (dev/test/prod/all)"
    echo "7. Parar todos os containers"
    echo "8. Sair"
    echo ""
}

# Verifica√ß√µes iniciais
create_directories

# Menu interativo
if [ $# -eq 0 ]; then
    while true; do
        show_menu
        read -p "Digite sua op√ß√£o (1-8): " option
        
        case $option in
            1) start_environment "dev" ;;
            2) start_environment "test" ;;
            3) start_environment "prod" ;;
            4) start_environment "all" ;;
            5) show_status ;;
            6) 
                read -p "Qual ambiente? (dev/test/prod/all): " log_env
                show_logs $log_env
                ;;
            7) 
                echo -e "${BLUE}üõë Parando todos os containers...${NC}"
                sudo docker-compose down
                echo -e "${GREEN}‚úÖ Containers parados${NC}"
                ;;
            8) 
                echo -e "${GREEN}üëã At√© logo!${NC}"
                exit 0
                ;;
            *) 
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
                ;;
        esac
        echo ""
        read -p "Pressione Enter para continuar..."
    done
else
    # Execu√ß√£o via par√¢metro
    case $1 in
        "start")
            start_environment ${2:-"all"}
            ;;
        "stop")
            stop_existing
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs ${2:-"dev"}
            ;;
        *)
            echo -e "${YELLOW}Uso: $0 [start|stop|status|logs] [dev|test|prod|all]${NC}"
            ;;
    esac
fi